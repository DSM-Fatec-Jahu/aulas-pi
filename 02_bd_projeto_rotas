# Aula 2: Conex√£o com MySQL, Projeto com Composer, PDO e Bootstrap 5.3

## üìã Sum√°rio da Aula

- [Introdu√ß√£o](#introdu√ß√£o)
- [1. Conectando ao MySQL](#1-conectando-ao-mysql-com-ip-e-porta)
- [2. Cria√ß√£o do Banco de Dados e Tabela](#2-cria√ß√£o-do-banco-e-da-tabela-usuarios)
- [3. Opera√ß√µes CRUD (SQL)](#3-opera√ß√µes-crud-sql-com-coment√°rios)
- [4. Criando Projeto com Composer](#4-criando-o-projeto-com-composer)
- [5. Configurando Autoload PSR-4](#5-configurando-o-autoload-psr-4)
- [6. Estrutura de Pastas](#6-estrutura-de-pastas-e-componentes)
- [7. Template Bootstrap](#7-template-base-com-bootstrap)
- [8. Roteador Simples](#8-roteador-simples)
- [9. Conex√£o PDO](#9-conex√£o-pdo-com-ip-e-porta)
- [10. Pr√≥ximos Passos](#10-pr√≥ximos-passos)

## Introdu√ß√£o

Ol√°! Bem-vindo √† segunda aula do nosso curso de PHP com MySQL. Nesta aula, vamos entender como construir um sistema web completo, desde a conex√£o com o banco de dados at√© a cria√ß√£o de uma estrutura organizada para o nosso projeto.

N√£o se preocupe se voc√™ n√£o tem experi√™ncia pr√©via - vamos explicar cada passo detalhadamente. Ao final desta aula, voc√™ ter√° criado a base para um sistema web completo com PHP e MySQL.

## 1. Conectando ao MySQL com IP e Porta

Antes de come√ßarmos a programar, precisamos nos conectar ao banco de dados MySQL atrav√©s do terminal. Isso nos permite criar e gerenciar nosso banco de dados diretamente.

```bash
mysql -h 127.0.0.1 -P 3306 -u root -p
```

**Explica√ß√£o detalhada:**
- `mysql`: Este √© o comando que inicia o cliente do MySQL no terminal
- `-h 127.0.0.1`: Define o endere√ßo IP do servidor MySQL. Neste caso, estamos usando o localhost (seu pr√≥prio computador)
- `-P 3306`: Define a porta onde o MySQL est√° rodando. A 3306 √© a porta padr√£o do MySQL
- `-u root`: Define o usu√°rio para conectar ao MySQL. "root" √© o usu√°rio administrador padr√£o
- `-p`: Indica que o MySQL deve solicitar a senha do usu√°rio

> **Dica para iniciantes:** Se voc√™ estiver usando XAMPP, WAMP ou similar, o MySQL j√° est√° instalado e voc√™ s√≥ precisa iniciar o servi√ßo antes de executar este comando.

## 2. Cria√ß√£o do Banco e da Tabela usuarios

Ap√≥s conectar ao MySQL, vamos criar nosso banco de dados e a primeira tabela que ir√° armazenar as informa√ß√µes dos usu√°rios do sistema.

### Criar banco e selecionar:

```sql
CREATE DATABASE sistema_projeto;

USE sistema_projeto;
```

**Explica√ß√£o:**
- `CREATE DATABASE sistema_projeto;`: Cria um novo banco de dados chamado "sistema_projeto"
- `USE sistema_projeto;`: Seleciona o banco de dados rec√©m-criado para uso

### Criar a tabela com todos os campos:

```sql
CREATE TABLE usuarios (
    id_usuario BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, -- identificador √∫nico
    nome VARCHAR(255) NOT NULL, -- nome completo do usu√°rio
    cpf VARCHAR(14), -- CPF no formato 000.000.000-00
    data_nascimento DATE, -- data no formato yyyy-mm-dd
    celular VARCHAR(20), -- celular com DDD
    rua VARCHAR(255), -- nome da rua
    numero VARCHAR(10), -- n√∫mero da resid√™ncia
    complemento VARCHAR(50), -- complemento (ex: apto)
    bairro VARCHAR(255), -- bairro
    cidade VARCHAR(255), -- cidade
    cep VARCHAR(10), -- CEP
    estado CHAR(2), -- estado (ex: SP, RJ)
    email VARCHAR(255) NOT NULL, -- e-mail v√°lido
    tipo ENUM('Administrador', 'Funcion√°rio', 'Cliente') NOT NULL, -- tipo de usu√°rio
    senha VARCHAR(255) NOT NULL, -- senha criptografada
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- data de cria√ß√£o
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- data de altera√ß√£o
    deleted_at TIMESTAMP NULL DEFAULT NULL -- marca√ß√£o de exclus√£o l√≥gica
);
```

**Explica√ß√£o detalhada da estrutura:**

- `id_usuario`: Identificador √∫nico de cada usu√°rio com as seguintes caracter√≠sticas:
  - `BIGINT`: N√∫mero inteiro grande (para suportar muitos registros)
  - `UNSIGNED`: Apenas n√∫meros positivos
  - `AUTO_INCREMENT`: Incrementa automaticamente a cada novo registro
  - `PRIMARY KEY`: Define como chave prim√°ria (identificador √∫nico da tabela)

- `nome VARCHAR(255) NOT NULL`: 
  - Campo para armazenar o nome completo
  - `VARCHAR(255)`: Texto de at√© 255 caracteres
  - `NOT NULL`: Campo obrigat√≥rio (n√£o pode ficar vazio)

- `cpf VARCHAR(14)`: 
  - Campo para armazenar o CPF incluindo pontos e tra√ßo (ex: 123.456.789-00)
  - Usamos VARCHAR em vez de n√∫mero porque o CPF tem formata√ß√£o

- `data_nascimento DATE`: 
  - Campo para armazenar a data de nascimento no formato YYYY-MM-DD

- Campos de endere√ßo:
  - `rua`, `numero`, `complemento`, `bairro`, `cidade`, `cep`, `estado`
  - Permitem armazenar o endere√ßo completo do usu√°rio

- `email VARCHAR(255) NOT NULL`:
  - Campo para armazenar o e-mail
  - `NOT NULL`: √â obrigat√≥rio fornecer um e-mail

- `tipo ENUM('Administrador', 'Funcion√°rio', 'Cliente') NOT NULL`:
  - Define o tipo/n√≠vel de acesso do usu√°rio
  - `ENUM`: Permite apenas os valores especificados entre par√™nteses
  - `NOT NULL`: Obrigat√≥rio definir um tipo

- `senha VARCHAR(255) NOT NULL`:
  - Armazena a senha criptografada do usu√°rio
  - NUNCA armazenamos senhas em texto puro!
  - 255 caracteres para acomodar senhas com hash (criptografadas)

- Campos de controle de datas:
  - `created_at`: Data/hora de cria√ß√£o do registro
  - `updated_at`: Data/hora da √∫ltima atualiza√ß√£o
  - `deleted_at`: Campo para implementar exclus√£o l√≥gica (null = ativo)

> **Conceito importante:** A tabela j√° inclui o conceito de **exclus√£o l√≥gica** atrav√©s do campo `deleted_at`. Quando este campo est√° NULL, significa que o usu√°rio est√° ativo. Quando cont√©m uma data/hora, significa que o usu√°rio foi "exclu√≠do" (mas os dados ainda est√£o no banco).

## 3. Opera√ß√µes CRUD (SQL) com Coment√°rios

CRUD √© um acr√¥nimo para as quatro opera√ß√µes b√°sicas de persist√™ncia de dados:
- **C**reate (Criar) - Inserir dados
- **R**ead (Ler) - Consultar dados
- **U**pdate (Atualizar) - Modificar dados
- **D**elete (Excluir) - Remover dados

Vamos ver como realizar cada uma dessas opera√ß√µes com SQL.

### ‚úÖ INSERT COMPLETO (Create)

```sql
-- Inserindo um novo usu√°rio com todos os campos preenchidos
INSERT INTO usuarios (
    nome, cpf, data_nascimento, celular, rua, numero, complemento,
    bairro, cidade, cep, estado, email, tipo, senha
)
VALUES (
    'Jo√£o da Silva',
    '123.456.789-00',
    '1990-05-15',
    '(11)99999-1234',
    'Rua das Flores',
    '123',
    'Apto 4B',
    'Centro',
    'S√£o Paulo',
    '01000-000',
    'SP',
    'joao.silva@email.com',
    'Cliente',
    'senha_criptografada_com_hash'
);
```

**Explica√ß√£o:**
- O comando `INSERT INTO` adiciona um novo registro na tabela
- Primeiro listamos os nomes das colunas que queremos preencher
- Em seguida, ap√≥s `VALUES`, fornecemos os valores para cada coluna na mesma ordem
- As strings devem estar entre aspas simples
- Perceba que n√£o inserimos valores para os campos `id_usuario`, `created_at`, `updated_at` e `deleted_at` porque eles s√£o preenchidos automaticamente

### üîÑ UPDATE com 2 campos (Update)

```sql
-- Atualizando nome e celular
UPDATE usuarios
SET nome = 'Jo√£o da Silva Atualizado',
    celular = '(11)98888-0000'
WHERE id_usuario = 1 AND deleted_at IS NULL;
```

**Explica√ß√£o:**
- O comando `UPDATE` modifica registros existentes
- `SET` define quais campos ser√£o alterados e seus novos valores
- `WHERE` √© MUITO IMPORTANTE: especifica quais registros ser√£o atualizados
- `AND deleted_at IS NULL` garante que apenas usu√°rios ativos sejam modificados
- Se n√£o inclu√≠ssemos a cl√°usula WHERE, TODOS os registros seriam atualizados!

### üîç READ (consulta)

```sql
-- Selecionar todos os usu√°rios n√£o deletados
SELECT * FROM usuarios WHERE deleted_at IS NULL;

-- Selecionar um usu√°rio espec√≠fico
SELECT * FROM usuarios WHERE id_usuario = 1 AND deleted_at IS NULL;
```

**Explica√ß√£o:**
- `SELECT * FROM usuarios`: Seleciona todos os campos (*) da tabela usuarios
- `WHERE deleted_at IS NULL`: Filtra apenas usu√°rios ativos (n√£o deletados)
- No segundo exemplo, adicionamos `id_usuario = 1` para buscar um usu√°rio espec√≠fico
- Sempre inclu√≠mos a condi√ß√£o `deleted_at IS NULL` para ignorar registros exclu√≠dos logicamente

### ‚ùå DELETE L√ìGICO

```sql
-- Marca o registro como deletado, mas mant√©m no banco
UPDATE usuarios
SET deleted_at = NOW()
WHERE id_usuario = 1;
```

**Explica√ß√£o:**
- Usamos um `UPDATE` para implementar a exclus√£o l√≥gica
- Definimos `deleted_at` com a data/hora atual (usando `NOW()`)
- Isso marca o registro como exclu√≠do sem remov√™-lo fisicamente do banco
- Todas as consultas devem incluir `WHERE deleted_at IS NULL` para ignorar esses registros

### ‚ö†Ô∏è DELETE F√çSICO

```sql
-- Remove o registro definitivamente do banco
DELETE FROM usuarios WHERE id_usuario = 1;
```

**Explica√ß√£o:**
- Este comando remove PERMANENTEMENTE o registro do banco de dados
- N√£o h√° como recuperar dados ap√≥s um DELETE f√≠sico (a menos que tenha backup)
- Use com extrema cautela!

### ‚öñÔ∏è Diferen√ßa entre DELETE L√≥gico e F√≠sico

| **Tipo de DELETE** | **Vantagens** | **Desvantagens** |
|-------------------|---------------|------------------|
| L√≥gico | ‚Ä¢ Permite recupera√ß√£o<br>‚Ä¢ Mant√©m hist√≥rico<br>‚Ä¢ Mais seguro | ‚Ä¢ Banco cresce com dados "inativos"<br>‚Ä¢ Precisa incluir condi√ß√£o `deleted_at IS NULL` em todas as consultas |
| F√≠sico | ‚Ä¢ Banco mais limpo<br>‚Ä¢ Consultas mais simples<br>‚Ä¢ Economiza espa√ßo | ‚Ä¢ Dados perdidos permanentemente<br>‚Ä¢ N√£o h√° hist√≥rico<br>‚Ä¢ Risco de exclus√£o acidental |

> **Recomenda√ß√£o para iniciantes:** Para sistemas de neg√≥cios, quase sempre √© melhor usar exclus√£o l√≥gica. Ela permite recuperar dados exclu√≠dos por engano e manter o hist√≥rico de informa√ß√µes.

## 4. Criando o Projeto com Composer

Agora que entendemos o banco de dados, vamos criar a estrutura do nosso projeto PHP. O Composer √© uma ferramenta essencial para gerenciar depend√™ncias e organizar projetos PHP modernos.

### 1. Criando a pasta do projeto:

```bash
cd c:\projetos
mkdir sistema_estoque
cd sistema_estoque
```

**Explica√ß√£o:**
- `cd c:\projetos`: Navega para a pasta onde criaremos nosso projeto
- `mkdir sistema_estoque`: Cria uma nova pasta chamada "sistema_estoque"
- `cd sistema_estoque`: Entra na pasta do projeto

> **Para usu√°rios macOS/Linux:** Use `cd ~/projetos` ou o caminho da sua prefer√™ncia

### 2. Iniciando o Composer:

```bash
composer init
```

Este comando inicia um assistente interativo para criar seu arquivo `composer.json`. Veja como preencher:

| **Pergunta** | **Exemplo** | **Explica√ß√£o** |
|--------------|-------------|----------------|
| Package name | ronan/sistema-estoque | Formato: `vendor/projeto` (geralmente seu nome/nickname + nome do projeto) |
| Description | Sistema de estoque com rotas seguras | Breve descri√ß√£o do que seu projeto faz |
| Author | Ronan Zenatti <ronan@exemplo.com> | Seu nome e e-mail |
| Minimum Stability | stable | Use apenas vers√µes est√°veis das depend√™ncias |
| License | MIT | Licen√ßa de software que voc√™ deseja usar |
| Definir depend√™ncias? | [n] (pressione ENTER) | Adicionaremos depend√™ncias mais tarde, se necess√°rio |

> **Dica para iniciantes:** O Composer simplifica muito o desenvolvimento PHP moderno. Ele permite carregar automaticamente suas classes e gerenciar bibliotecas externas.

## 5. Configurando o Autoload PSR-4

PSR-4 √© um padr√£o de carregamento autom√°tico de classes em PHP. Configurar o autoload permite que suas classes sejam carregadas automaticamente sem precisar de "includes" ou "requires" manuais.

No seu arquivo `composer.json`, adicione:

```json
"autoload": {
    "psr-4": {
        "App\\": "app/"
    }
}
```

**Explica√ß√£o detalhada:**
- `"autoload"`: Define configura√ß√µes de carregamento autom√°tico
- `"psr-4"`: Especifica que estamos usando o padr√£o PSR-4
- `"App\\": "app/"`: Todo namespace come√ßando com `App\` ser√° procurado na pasta `app/`
  - Note que no namespace usamos barra dupla `\\` porque a primeira barra √© de escape em JSON

Ap√≥s adicionar essa configura√ß√£o, execute:

```bash
composer dump-autoload
```

**O que isso faz:**
- Gera os arquivos necess√°rios para o autoload funcionar
- Quando criarmos classes com o namespace `App\`, o PHP conseguir√° encontr√°-las automaticamente
- Isso elimina a necessidade de fazer `require` de cada arquivo manualmente

## 6. Estrutura de Pastas e Componentes

Agora vamos organizar nosso projeto em uma estrutura de pastas l√≥gica, seguindo boas pr√°ticas de desenvolvimento:

```
sistema_estoque/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ Controllers/   -> Regras e l√≥gicas das rotas
‚îÇ   ‚îú‚îÄ‚îÄ Core/          -> Conex√£o com banco (Database.php)
‚îÇ   ‚îú‚îÄ‚îÄ Models/        -> Comunica√ß√£o com banco (ex: Usuario.php)
‚îÇ   ‚îú‚îÄ‚îÄ Views/         -> HTML das p√°ginas
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layouts/   -> Template base com Bootstrap
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ home.php
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sobre.php
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.php
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboard.php
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ usuarios/  -> P√°ginas de CRUD
‚îú‚îÄ‚îÄ public/            -> Ponto de entrada (index.php)
‚îú‚îÄ‚îÄ composer.json      -> Arquivo de configura√ß√£o
‚îú‚îÄ‚îÄ vendor/            -> Pasta criada pelo Composer
```

**Explica√ß√£o da estrutura:**

- **app/**: Cont√©m todo o c√≥digo da aplica√ß√£o organizado por responsabilidade
  - **Controllers/**: Classes respons√°veis por processar as requisi√ß√µes e conectar Models e Views
  - **Core/**: Componentes essenciais como conex√£o com banco de dados
  - **Models/**: Classes que manipulam os dados e se comunicam com o banco
  - **Views/**: Arquivos HTML/PHP para exibi√ß√£o ao usu√°rio

- **public/**: √önico diret√≥rio acess√≠vel pelo navegador
  - Cont√©m o arquivo index.php que serve como ponto de entrada √∫nico
  - Aqui tamb√©m ficariam arquivos CSS, JavaScript e imagens

- **vendor/**: Gerada automaticamente pelo Composer
  - Cont√©m as depend√™ncias e o autoloader

> **Por que esta estrutura?** Separa claramente as responsabilidades, aumenta a seguran√ßa (apenas a pasta public √© acess√≠vel) e facilita a manuten√ß√£o do c√≥digo.

## 7. Template Base com Bootstrap (app/Views/layouts/base.php)

Vamos criar um template base que ser√° usado em todas as p√°ginas do sistema. Utilizaremos o Bootstrap 5.3 para facilitar a cria√ß√£o de interfaces responsivas:

```php
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title><?= $title ?? 'Sistema' ?></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">Sistema</a>
            <ul class="navbar-nav">
                <li class="nav-item"><a class="nav-link" href="/">Home</a></li>
                <li class="nav-item"><a class="nav-link" href="/sobre">Sobre</a></li>
                <li class="nav-item"><a class="nav-link" href="/login">Login</a></li>
                <li class="nav-item"><a class="nav-link" href="/dashboard">Dashboard</a></li>
            </ul>
        </div>
    </nav>

    <div class="container mt-4">
        <?= $content ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
```

**Explica√ß√£o detalhada:**

- `<!DOCTYPE html>`: Define o documento como HTML5
- `<html lang="pt-br">`: Define o idioma da p√°gina como portugu√™s do Brasil
- No `<head>`:
  - Definimos a codifica√ß√£o como UTF-8 para suportar caracteres especiais
  - O t√≠tulo da p√°gina usa o operador de coalesc√™ncia nula (`??`) que significa: use `$title` se existir, sen√£o use 'Sistema'
  - Carregamos o CSS do Bootstrap 5.3 via CDN (Content Delivery Network)

- No `<body>`:
  - Criamos uma barra de navega√ß√£o escura com Bootstrap (`navbar-dark bg-dark`)
  - A navega√ß√£o cont√©m links para as principais p√°ginas do sistema
  - `<div class="container mt-4">`: Cria um container com margem superior
  - `<?= $content ?>`: Aqui ser√° injetado o conte√∫do espec√≠fico de cada p√°gina

- No final:
  - Carregamos o JavaScript do Bootstrap para componentes interativos

> **Sobre Bootstrap:** √â um framework CSS que facilita a cria√ß√£o de interfaces responsivas. As classes como `container`, `navbar`, `mt-4` s√£o do Bootstrap e formatam elementos automaticamente.

## 8. Roteador Simples (public/index.php)

Agora, vamos criar um sistema de rotas simples para direcionar as requisi√ß√µes para as p√°ginas corretas:

```php
<?php

require __DIR__ . '/../vendor/autoload.php';

function render($view, $data = []) {
    extract($data);
    ob_start();
    require __DIR__ . '/../app/Views/' . $view;
    $content = ob_get_clean();
    require __DIR__ . '/../app/Views/layouts/base.php';
}

$url = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);

if ($url === '/' || $url === '/index.php') {
    render('home.php', ['title' => 'P√°gina Inicial']);
} elseif ($url === '/sobre') {
    render('sobre.php', ['title' => 'Sobre']);
} elseif ($url === '/login') {
    render('login.php', ['title' => 'Login']);
} elseif ($url === '/dashboard') {
    render('dashboard.php', ['title' => 'Painel']);
} elseif ($url === '/usuarios') {
    render('usuarios/index.php', ['title' => 'Lista de Usu√°rios']);
} elseif ($url === '/usuarios/novo') {
    render('usuarios/create.php', ['title' => 'Novo Usu√°rio']);
} elseif ($url === '/usuarios/salvar' && $_SERVER['REQUEST_METHOD'] === 'POST') {
    echo "Usu√°rio salvo!";
} elseif (preg_match('#^/usuarios/(\d+)$#', $url, $m)) {
    render('usuarios/show.php', ['usuarioId' => $m[1]]);
} elseif (preg_match('#^/usuarios/(\d+)/alterar$#', $url, $m)) {
    render('usuarios/edit.php', ['usuarioId' => $m[1]]);
} elseif (preg_match('#^/usuarios/(\d+)/deletar$#', $url, $m)) {
    echo "Usu√°rio ID {$m[1]} deletado!";
} else {
    http_response_code(404);
    echo "P√°gina n√£o encontrada.";
}
```

**Explica√ß√£o detalhada:**

1. **Inicializa√ß√£o:**
   - `require __DIR__ . '/../vendor/autoload.php';`: Carrega o autoloader do Composer

2. **Fun√ß√£o render:**
   - Esta fun√ß√£o facilita o carregamento de views com layout consistente
   - `extract($data);`: Converte chaves do array em vari√°veis (ex: `$data['title']` vira `$title`)
   - `ob_start();`: Inicia o buffer de sa√≠da para capturar o conte√∫do
   - `require __DIR__ . '/../app/Views/' . $view;`: Carrega a view espec√≠fica
   - `$content = ob_get_clean();`: Captura o conte√∫do da view e limpa o buffer
   - `require __DIR__ . '/../app/Views/layouts/base.php';`: Carrega o template base

3. **Roteamento:**
   - `$url = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);`: Obt√©m a URL atual
   - Cada condi√ß√£o `if/elseif` representa uma rota diferente
   - Para rotas simples, usamos compara√ß√£o direta: `$url === '/sobre'`
   - Para rotas com par√¢metros, usamos express√µes regulares: `preg_match('#^/usuarios/(\d+)$#', $url, $m)`
     - `(\d+)` captura n√∫meros que ser√£o armazenados em `$m[1]`
   - A rota `/usuarios/salvar` verifica se o m√©todo √© POST (para salvar formul√°rios)
   - Inclu√≠mos uma condi√ß√£o `else` para tratar URLs n√£o encontradas (404)

> **Sobre roteamento:** Em projetos maiores, usar√≠amos um sistema de rotas mais robusto, mas esta implementa√ß√£o simples serve bem para entender o conceito.

## 9. Conex√£o PDO com IP e Porta (app/Core/Database.php)

Por fim, vamos criar a classe respons√°vel pela conex√£o com o banco de dados usando PDO (PHP Data Objects), que √© uma interface de acesso a banco de dados mais segura:

```php
<?php

namespace App\Core;

use PDO;
use PDOException;

class Database {
    public static function conectar() {
        $host = '127.0.0.1';
        $porta = '3306';
        $banco = 'sistema_projeto';
        $usuario = 'root';
        $senha = '';
        
        $dsn = "mysql:host=$host;port=$porta;dbname=$banco;charset=utf8";
        
        try {
            return new PDO($dsn, $usuario, $senha, [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
            ]);
        } catch (PDOException $e) {
            die("Erro na conex√£o: " . $e->getMessage());
        }
    }
}
```

**Explica√ß√£o detalhada:**

1. **Namespace e Imports:**
   - `namespace App\Core;`: Define o namespace da classe (que corresponde √† pasta app/Core/)
   - `use PDO;` e `use PDOException;`: Importa as classes do PHP para uso no c√≥digo

2. **Classe Database:**
   - Uma classe est√°tica que fornece m√©todos de conex√£o com o banco
   - `public static function conectar()`: M√©todo que pode ser chamado sem instanciar a classe

3. **Configura√ß√£o da Conex√£o:**
   - Define os par√¢metros de conex√£o: host, porta, nome do banco, usu√°rio e senha
   - `$dsn` (Data Source Name): String de conex√£o com todos os par√¢metros

4. **Cria√ß√£o da Conex√£o PDO:**
   - `new PDO($dsn, $usuario, $senha, [...])`: Cria a conex√£o com os par√¢metros fornecidos
   - Configura√ß√µes adicionais:
     - `PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION`: Lan√ßa exce√ß√µes quando ocorrem erros
     - `PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC`: Retorna resultados como arrays associativos

5. **Tratamento de Erros:**
   - `try/catch` captura erros de conex√£o
   - Se algo der errado, exibe a mensagem de erro

> **Por que usar PDO?** O PDO oferece maior seguran√ßa contra SQL Injection e suporta diversos bancos de dados, permitindo trocar facilmente entre MySQL, PostgreSQL, SQLite, etc.

## 10. Pr√≥ximos Passos

Parab√©ns! Agora voc√™ tem a base de um sistema web completo com PHP e MySQL. Aqui est√£o os pr√≥ximos passos para expandir seu projeto:

1. **Criar as views**: Desenvolva os arquivos PHP para home.php, sobre.php, login.php, etc.
2. **Implementar Controllers**: Crie classes para gerenciar a l√≥gica de cada se√ß√£o do sistema
3. **Desenvolver Models**: Implemente classes para manipular os dados no banco
4. **Autentica√ß√£o de usu√°rios**: Crie um sistema de login seguro
5. **Sess√µes e cookies**: Para manter usu√°rios logados
6. **Valida√ß√£o de formul√°rios**: Para garantir a integridade dos dados

---

Esta estrutura forma a base para um sistema PHP moderno, seguindo boas pr√°ticas de organiza√ß√£o e seguran√ßa. Nos pr√≥ximos m√≥dulos, expandiremos cada uma dessas √°reas e transformaremos esta base em um sistema completo de gest√£o.

Lembre-se de praticar cada conceito individualmente antes de avan√ßar. A pr√°tica √© essencial para fixar o aprendizado!

---

## üìö Recursos Adicionais

- [Documenta√ß√£o oficial do PHP](https://www.php.net/manual/pt_BR/)
- [Documenta√ß√£o do MySQL](https://dev.mysql.com/doc/)
- [Documenta√ß√£o do Composer](https://getcomposer.org/doc/)
- [Bootstrap 5.3 Documentation](https://getbootstrap.com/docs/5.3/getting-started/introduction/)
- [PHP The Right Way](https://phptherightway.com/)

---

Desenvolvido para o curso de PHP Seguro + MySQL com Rotas - Prof. Ronan Adriel Zenatti - FATEC Ja√∫